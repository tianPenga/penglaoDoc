import{_ as s,c as i,o as t,a4 as a}from"./chunks/framework.E4YCCYO0.js";const g=JSON.parse('{"title":"HTML基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"html/base.md","filePath":"html/base.md"}'),l={name:"html/base.md"},h=a(`<h1 id="html基础知识" tabindex="-1">HTML基础知识 <a class="header-anchor" href="#html基础知识" aria-label="Permalink to &quot;HTML基础知识&quot;">​</a></h1><p>下面开始介绍HTML的基础知识</p><h2 id="语义化标签" tabindex="-1">语义化标签 <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;语义化标签&quot;">​</a></h2><p>语义化标签是伴随HTML5的更新而产生的，主要介绍以下5种：</p><table><thead><tr><th>&lt;Header&gt;</th><th>头部标签</th></tr></thead><tbody><tr><td>&lt;main&gt;</td><td>主体标签</td></tr><tr><td>&lt;section&gt;</td><td>部分标签</td></tr><tr><td>&lt;footer&gt;</td><td>页脚标签</td></tr><tr><td>&lt;article&gt;</td><td>文章标签</td></tr><tr><td>&lt;aside&gt;</td><td>注释标签</td></tr></tbody></table><p>语义化标签的出现让开发者在进行HTML结构编写时有了更清晰的选择，比如，以往开发者想要把一个小容器放到大容器里，ta可能会这样写：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;section&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是section，一个小容器&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>但是有了语义化标签之后，ta就不必去纠结这样的问题，我该给大容器div起什么类名标识最好呢？小容器类名又该是什么？现在ta可以这样做：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是section，一个语义化标签&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>同时，语义化标签还有这样的八股文传说（使用语义化标签的好处）：</p><ol><li>有利于纠正开发者总是开发时使用div的习惯，增加了HTML的可读性，也方便了后期的代码维护。</li><li>有利于SEO（搜索引擎）对网页的爬虫，从某种层度上可以提高网站的排名。（Tips:百度就是通过爬虫给大家搜索大家感兴趣的网页）</li><li>有利于客户在网站的阅读体验，语义化标签实现的网页界面更加合理也好看。</li></ol><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><p><a href="./../vsPlugins/base.html">HTML插件</a></p>`,13),e=[h];function n(p,d,k,r,E,o){return t(),i("div",null,e)}const y=s(l,[["render",n]]);export{g as __pageData,y as default};
